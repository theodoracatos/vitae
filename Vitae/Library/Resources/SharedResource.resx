<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="About" xml:space="preserve">
    <value>About</value>
  </data>
  <data name="Add" xml:space="preserve">
    <value>Add</value>
  </data>
  <data name="AllowedFiles" xml:space="preserve">
    <value>files are allowed to be uploaded</value>
  </data>
  <data name="AttemptedValueIsInvalidAccessor" xml:space="preserve">
    <value>The value '{0}' is not valid for {1}</value>
  </data>
  <data name="Awards" xml:space="preserve">
    <value>Awards</value>
  </data>
  <data name="Birthday" xml:space="preserve">
    <value>Birthday</value>
  </data>
  <data name="Browse" xml:space="preserve">
    <value>Browse</value>
  </data>
  <data name="Cancel" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="ChooseFile" xml:space="preserve">
    <value>Choose a file to upload</value>
  </data>
  <data name="ChosenFile" xml:space="preserve">
    <value>file has been chosen</value>
  </data>
  <data name="City" xml:space="preserve">
    <value>City</value>
  </data>
  <data name="City1" xml:space="preserve">
    <value>City</value>
  </data>
  <data name="Confirm" xml:space="preserve">
    <value>Confirm</value>
  </data>
  <data name="CountryCode" xml:space="preserve">
    <value>Code</value>
  </data>
  <data name="CountryName" xml:space="preserve">
    <value>Country</value>
  </data>
  <data name="CurriculumVitae" xml:space="preserve">
    <value>Curriculum Vitae</value>
  </data>
  <data name="CV" xml:space="preserve">
    <value>CV</value>
  </data>
  <data name="DropFile" xml:space="preserve">
    <value>Drop a file to upload</value>
  </data>
  <data name="Education" xml:space="preserve">
    <value>Education</value>
  </data>
  <data name="Email" xml:space="preserve">
    <value>Email</value>
  </data>
  <data name="End" xml:space="preserve">
    <value>End</value>
  </data>
  <data name="Experience" xml:space="preserve">
    <value>Experience</value>
  </data>
  <data name="FilesTooLarge" xml:space="preserve">
    <value>Files you've choosed are too large</value>
  </data>
  <data name="FileTooLarge" xml:space="preserve">
    <value>is too large - max filesize is</value>
  </data>
  <data name="Firstname" xml:space="preserve">
    <value>Firstname</value>
  </data>
  <data name="FolderUpload" xml:space="preserve">
    <value>You are not allowed to upload folders</value>
  </data>
  <data name="Gender" xml:space="preserve">
    <value>Gender</value>
  </data>
  <data name="Grade" xml:space="preserve">
    <value>Grade</value>
  </data>
  <data name="Interests" xml:space="preserve">
    <value>Interests</value>
  </data>
  <data name="Language" xml:space="preserve">
    <value>Language</value>
  </data>
  <data name="Languages" xml:space="preserve">
    <value>Languages</value>
  </data>
  <data name="Lastname" xml:space="preserve">
    <value>Lastname</value>
  </data>
  <data name="LoggedInAs" xml:space="preserve">
    <value>Logged in as</value>
  </data>
  <data name="Manage" xml:space="preserve">
    <value>Manage</value>
  </data>
  <data name="MissingBindRequiredValueAccessor" xml:space="preserve">
    <value>A value for the '{0}' property was not provided</value>
  </data>
  <data name="MissingKeyOrValueAccessor" xml:space="preserve">
    <value>A value is required</value>
  </data>
  <data name="MissingRequestBodyRequiredValueAccessor" xml:space="preserve">
    <value>A non-empty request body is required</value>
  </data>
  <data name="MobileNumber" xml:space="preserve">
    <value>Mobile number</value>
  </data>
  <data name="Mr" xml:space="preserve">
    <value>Mr</value>
  </data>
  <data name="Ms" xml:space="preserve">
    <value>Ms</value>
  </data>
  <data name="MyVitae" xml:space="preserve">
    <value>My Vitae</value>
  </data>
  <data name="Nationality" xml:space="preserve">
    <value>Nationality</value>
  </data>
  <data name="No" xml:space="preserve">
    <value>No</value>
  </data>
  <data name="NonPropertyAttemptedValueIsInvalidAccessor" xml:space="preserve">
    <value>The value '{0}' is not valid</value>
  </data>
  <data name="NonPropertyUnknownValueIsInvalidAccessor" xml:space="preserve">
    <value>The supplied value is invalid</value>
  </data>
  <data name="NonPropertyValueMustBeANumberAccessor" xml:space="preserve">
    <value>The field must be a number</value>
  </data>
  <data name="Ok" xml:space="preserve">
    <value>Ok</value>
  </data>
  <data name="Only" xml:space="preserve">
    <value>Only</value>
  </data>
  <data name="OnlyPdf" xml:space="preserve">
    <value>Only PDF files are allowed to be uploaded</value>
  </data>
  <data name="PersonalData" xml:space="preserve">
    <value>Personal data</value>
  </data>
  <data name="PersonalDetails" xml:space="preserve">
    <value>Personal details</value>
  </data>
  <data name="Personalies" xml:space="preserve">
    <value>Personalies</value>
  </data>
  <data name="Photo" xml:space="preserve">
    <value>Photo</value>
  </data>
  <data name="PleaseConfirm" xml:space="preserve">
    <value>Please confirm</value>
  </data>
  <data name="PleaseUpload" xml:space="preserve">
    <value>Please upload files up to</value>
  </data>
  <data name="ProperValue" xml:space="preserve">
    <value>Please enter a proper value</value>
  </data>
  <data name="Remove" xml:space="preserve">
    <value>Remove</value>
  </data>
  <data name="RemoveFileConfirmation" xml:space="preserve">
    <value>Are you sure you want to remove this file</value>
  </data>
  <data name="RemovePicture" xml:space="preserve">
    <value>Remove this picture</value>
  </data>
  <data name="Required" xml:space="preserve">
    <value>Please add a value</value>
  </data>
  <data name="RequiredSelection" xml:space="preserve">
    <value>Please select a value</value>
  </data>
  <data name="Resumee" xml:space="preserve">
    <value>Summary</value>
  </data>
  <data name="Save" xml:space="preserve">
    <value>Save</value>
  </data>
  <data name="SchoolLink" xml:space="preserve">
    <value>Link</value>
  </data>
  <data name="SchoolName" xml:space="preserve">
    <value>Educational institution</value>
  </data>
  <data name="Select" xml:space="preserve">
    <value>Select</value>
  </data>
  <data name="Slogan" xml:space="preserve">
    <value>Slogan</value>
  </data>
  <data name="Start" xml:space="preserve">
    <value>Start</value>
  </data>
  <data name="State" xml:space="preserve">
    <value>State</value>
  </data>
  <data name="Street" xml:space="preserve">
    <value>Street</value>
  </data>
  <data name="StreetNo" xml:space="preserve">
    <value>Number</value>
  </data>
  <data name="Subject" xml:space="preserve">
    <value>Subject of education</value>
  </data>
  <data name="Title" xml:space="preserve">
    <value>Title of education</value>
  </data>
  <data name="UnknownValueIsInvalidAccessor" xml:space="preserve">
    <value>The supplied value is invalid for {0}</value>
  </data>
  <data name="UntilNow" xml:space="preserve">
    <value>Until now</value>
  </data>
  <data name="ValueIsInvalidAccessor" xml:space="preserve">
    <value>The value '{0}' is invalid</value>
  </data>
  <data name="ValueMustBeANumberAccessor" xml:space="preserve">
    <value>The field {0} must be a number</value>
  </data>
  <data name="ValueMustNotBeNullAccessor" xml:space="preserve">
    <value>The value '{0}' is invalid</value>
  </data>
  <data name="Warning" xml:space="preserve">
    <value>Warning</value>
  </data>
  <data name="Yes" xml:space="preserve">
    <value>Yes</value>
  </data>
  <data name="ZipCode" xml:space="preserve">
    <value>ZIP-Code</value>
  </data>
</root>